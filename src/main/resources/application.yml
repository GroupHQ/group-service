#sentry:
#  dsn: https://9fc07fdf536634533ad6956ca8f45d1e@o4505767793524736.ingest.sentry.io/4505767799095296
#  # Set traces-sample-rate to 1.0 to capture 100% of transactions for performance monitoring.
#  # We recommend adjusting this value in production.
#  traces-sample-rate: 1.0
server:
  port: 9001
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
group:
  character-generator:
    unique-attempts: 1000
  loader:
    enabled: false
    group-service-jobs:
      load-groups:
        initial-delay: 0
        fixed-delay: 600
        initial-group-count: 3
        fixed-group-addition-count: 1
      expire-groups:
        initial-delay: 0
        fixed-delay: 179
        group-lifetime: 1800
      load-members:
        initial-delay: 60
        fixed-delay: 60
        member-join-max-delay: 120
openai:
  enabled: false
  api_key: ${OPEN_AI_API_KEY}
  max-tokens: 500
  model-id: gpt-3.5-turbo
  retry-config:
    initial-delay: 1000
    max-attempts: 3
    max-delay: 5000
    jitter-factor: 0.5
spring:
  application:
    name: group-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/grouphq_groups
    pool:
      max-create-connection-time: 2s
      initial-size: 5
      max-size: 10
  flyway:
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/grouphq_groups
#  config:
#    import: optional:configserver:${SPRING_CLOUD_CONFIG_URI:http://localhost:8888}
  cloud:
    config:
      enabled: false
      fail-fast: false
      request-connect-timeout: 5000
      request-read-timeout: 5000
      retry:
        multiplier: 1.5
        initial-interval: 10000
        max-interval: 50000
        max-attempts: 6
    function:
      definition: |
        groupCreateRequests;
        groupStatusRequests;
        groupJoinRequests;
        groupLeaveRequests;
        processedEvents
    stream:
      bindings:
        groupCreateRequests-in-0:
          destination: group-create-requests
          group: ${spring.application.name}
        groupStatusRequests-in-0:
          destination: group-status-requests
          group: ${spring.application.name}
        groupJoinRequests-in-0:
          destination: group-join-requests
          group: ${spring.application.name}
        groupLeaveRequests-in-0:
          destination: group-leave-requests
          group: ${spring.application.name}
        processedEvents-out-0:
          destination: group-event-results
  integration:
    poller:
      fixed-delay: 50
    error:
      require-subscribers: false
  rabbitmq:
    host: {$SPRING_RABBITMQ_HOST:localhost}
    port: 5672
    username: user
    password: password
    connection-timeout: 5s
logging:
  level:
    root: info
    org.grouphq: debug
  pattern:
    level: "%5p[${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
management:
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: flyway, health, heapdump, info, prometheus
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
info:
  system: GroupHQ